#!/bin/bash

# wine-platform dir
WP=$SNAP/wine-platform
# wine release
REL=staging
# wine base
WINE_BASE=wine-$REL

if [ ! -f $WP/bin/wpfile ] ; then
  echo "You need to connect this snap to the wine-platform snap."
  echo ""
  echo "snap disconnect $SNAP_NAME:wine-platform-plug"
  echo "snap install wine-platform"
  echo "snap connect $SNAP_NAME:wine-platform-plug wine-platform:wine-base-$REL"
  echo ""
  echo "Remove deprecated wine-platform-i386 snap."
  echo ""
  echo "snap remove wine-platform-i386"
  exit 1
fi

TITLE="League Of Legends"
NOTICE="The ${TITLE} snap is experimental, built
with development releases of upstream WINE and may not function as expected.\n\nIf you encounter issues please report them on the
${TITLE} snap issue tracker:
\n\nhttps://github.com/mmtrt/leagueoflegends/issues"

needs_update=true

. $SNAP_USER_DATA/.last_revision 2>/dev/null || true
if [ "$SNAP_DESKTOP_LAST_REVISION" = "$SNAP_REVISION" ]; then
  needs_update=false
fi

# Set $REALHOME to the users real home directory
REALHOME=`getent passwd $UID | cut -d ':' -f 6`

function install_app() {
  # Install additional requirements via winetricks here
  if [ -n "${TRICKS}" ]; then
    for TRICK in ${TRICKS}; do
      env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINETRICKS}" --unattended ${TRICK}
    done
  fi

function install_na() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_NA}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_NA}" -O "${TMPDIR}/${INSTALL_EXE_NA}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_NA}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_NA}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_NA}"
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    # Launch after install.
    launch_app
  fi
}

function install_euw() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_EUW}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_EUW}" -O "${TMPDIR}/${INSTALL_EXE_EUW}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_EUW}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_EUW}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_EUW}"
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    # Launch after install.
    launch_app
  fi
}

function install_eune() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_EUNE}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_EUNE}" -O "${TMPDIR}/${INSTALL_EXE_EUNE}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_EUNE}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_EUNE}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_EUNE}"
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    # Launch after install.
    launch_app
  fi
}

function install_br() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_BR}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_BR}" -O "${TMPDIR}/${INSTALL_EXE_BR}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_BR}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_BR}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_BR}"
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    # Launch after install.
    launch_app
  fi
}

function install_jp() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_JP}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_JP}" -O "${TMPDIR}/${INSTALL_EXE_JP}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_JP}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_JP}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_JP}"
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    # Launch after install.
    launch_app
  fi
}

function install_lan() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_LAN}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_LAN}" -O "${TMPDIR}/${INSTALL_EXE_LAN}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_LAN}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_LAN}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_LAN}"
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    # Launch after install.
    launch_app
  fi
}

function install_las() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_LAS}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_LAS}" -O "${TMPDIR}/${INSTALL_EXE_LAS}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_LAS}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_LAS}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_LAS}"
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    # Launch after install.
    launch_app
  fi
}

function install_oce() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_OCE}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_OCE}" -O "${TMPDIR}/${INSTALL_EXE_OCE}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_OCE}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_OCE}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_OCE}"
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    # Launch after install.
    launch_app
  fi
}

function install_ru() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_RU}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_RU}" -O "${TMPDIR}/${INSTALL_EXE_RU}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_RU}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_RU}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_RU}"
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    # Launch after install.
    launch_app
  fi
}

function install_tr() {
    # Modify or remove this as required by your application.
  if [ -n "${INSTALL_URL_TR}" ]; then
    # Downloads a file with progress using wget and yad
    wget "${INSTALL_URL_TR}" -O "${TMPDIR}/${INSTALL_EXE_TR}" 2>&1 | \
    perl -p -e '$| = 1; s/^.* +([0-9]+%) +([0-9,.]+[GMKB]) +([0-9hms,.]+).*$/\1\n# Downloading... \2 (\3)/' | \
    yad --progress --title="${INSTALL_EXE_TR}" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --no-escape
    # Installs the wine application
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${TMPDIR}/${INSTALL_EXE_TR}" --mode unattended
    # Remove the cached installers & files
    rm -v "${TMPDIR}/${INSTALL_EXE_TR}"
    rm -rf "${XDG_CACHE_HOME}/winetricks" 2>/dev/null
    # Launch after install.
    launch_app
  fi
}

  action=$(yad --width 400 --entry --title "League Of Legends" \
      --center \
      --width=400 \
      --button="Install:0" --button="Exit:1" \
      --text "Select Game Installer Region:" \
      --entry-text \
      "NA" "EUW" "EUNE" "BR" "JP" "LAN" "LAS" "OCE" "RU" "TR")
  ret=$?

  [[ $ret -eq 1 ]] && exit 0

  case $action in
      NA*) cmd=$(install_na) ;;
      EUW*) cmd=$(install_euw) ;;
      EUNE*) cmd=$(install_eune) ;;
      BR*) cmd=$(install_br) ;;
      JP*) cmd=$(install_jp) ;;
      LAN*) cmd=$(install_lan) ;;
      LAS*) cmd=$(install_las) ;;
      OCE*) cmd=$(install_oce) ;;
      RU*) cmd=$(install_ru) ;;
      TR*) cmd=$(install_tr) ;;
      *) exit 1 ;;
  esac

  eval $cmd 2>/dev/null
}

function launch_app() {
  # If we don't change into the program directory some assets may not be found
  cd "${WINE_DIR}"

  # Only use virtual desktop if it has been requested and we're running Xorg
  if [ "${XDG_SESSION_TYPE}" == "x11" ] && [ "${VIRTDESKTOP}" == "1" ]; then
    # Get the native resolution of the primary display.
    # Creating a virtual desktop the same size will eliminate bugs when
    # switching from fullscreen to windowed mode.
    NATIVE_RES=$(xrandr -q | grep primary | cut -d' ' -f4 | cut -d'+' -f1)
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" explorer /desktop="virtual","${NATIVE_RES}" "${WINE_EXE}"
  else
    env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" "${WINE_EXE}"
  fi
}

function prepend_dir() {
  local var="$1"
  local dir="$2"
  if [ -d "$dir" ]; then
    eval "export $var=\"\$dir\${$var:+:\$$var}\""
  fi
}

function append_dir() {
  local var="$1"
  local dir="$2"
  if [ -d "$dir" ]; then
    eval "export $var=\"\${$var:+\$$var:}\$dir\""
  fi
}

# Get the executable we're being asked to launch
if [ -n "${1}" ]; then
  WINE_EXE="${1}"
  WINE_DIR=$(dirname "${WINE_EXE}")
fi

# If we've been given and installer URL derive the filename
if [ -n "${INSTALL_URL_NA}" ]; then
  INSTALL_EXE_NA=$(basename "${INSTALL_URL_NA}")
fi

if [ -n "${INSTALL_URL_EUW}" ]; then
  INSTALL_EXE_EUW=$(basename "${INSTALL_URL_EUW}")
fi

if [ -n "${INSTALL_URL_EUNE}" ]; then
  INSTALL_EXE_EUNE=$(basename "${INSTALL_URL_EUNE}")
fi

if [ -n "${INSTALL_URL_BR}" ]; then
  INSTALL_EXE_BR=$(basename "${INSTALL_URL_BR}")
fi

if [ -n "${INSTALL_URL_JP}" ]; then
  INSTALL_EXE_JP=$(basename "${INSTALL_URL_JP}")
fi

if [ -n "${INSTALL_URL_LAN}" ]; then
  INSTALL_EXE_LAN=$(basename "${INSTALL_URL_LAN}")
fi

if [ -n "${INSTALL_URL_LAS}" ]; then
  INSTALL_EXE_LAS=$(basename "${INSTALL_URL_LAS}")
fi

if [ -n "${INSTALL_URL_OCE}" ]; then
  INSTALL_EXE_OCE=$(basename "${INSTALL_URL_OCE}")
fi

if [ -n "${INSTALL_URL_RU}" ]; then
  INSTALL_EXE_RU=$(basename "${INSTALL_URL_RU}")
fi

if [ -n "${INSTALL_URL_TR}" ]; then
  INSTALL_EXE_TR=$(basename "${INSTALL_URL_TR}")
fi

# On Fedora $SNAP is under /var and there is some magic to map it to /snap.
# # We need to handle that case and reset $SNAP
SNAP=`echo $SNAP | sed -e "s|/var/lib/snapd||g"`

export GTK_MODULES=""

if [ "$SNAP_ARCH" = "amd64" ]; then
  export WINEARCH=win64
  export ARCH="x86_64-linux-gnu"
elif [ "$SNAP_ARCH" = "i386" ]; then
  export WINEARCH=win32
  export ARCH="i386-linux-gnu"
else
  echo "Host architecture ($SNAP_ARCH) unsupported."
  exit 1
fi

if [ -n "${DLLOVERRIDES}" ]; then
  export WINEDLLOVERRIDES="${DLLOVERRIDES}"
fi

export WINEVERPATH=$WP/$WINE_BASE
export WINESERVER=$WP/$WINE_BASE/bin/wineserver
export WINELOADER=$WP/$WINE_BASE/bin/wine
export WINEDLLPATH=$WP/$WINE_BASE/lib/wine/fakedlls
export WINETRICKS=$WP/bin/winetricks
export WINEPREFIX="$SNAP_USER_COMMON/.wine"
export WINEDEBUG=-all
export LD_LIBRARY_PATH="$WP/lib:$WP/lib/$ARCH:$WP/usr/lib:$WP/usr/lib/$ARCH:$LD_LIBRARY_PATH"
export PATH=$PATH:$WP/bin:$WP/usr/bin:$WP/$WINE_BASE/bin

if [ "$SNAP_ARCH" = "amd64" ]; then
  append_dir LD_LIBRARY_PATH $WP/lib64
  append_dir LD_LIBRARY_PATH $WP/lib/i386-linux-gnu
  append_dir LD_LIBRARY_PATH $WP/usr/lib/i386-linux-gnu
fi

# XKB config
export XKB_CONFIG_ROOT=$WP/usr/share/X11/xkb

# Give XOpenIM a chance to locate locale data.
# This is required for text input to work in SDL2 games.
export XLOCALEDIR=$WP/usr/share/X11/locale
export LOCPATH=$WP/usr/lib/locale

# Set XCursors path
export XCURSOR_PATH=$WP/usr/share/icons
prepend_dir XCURSOR_PATH $SNAP/data-dir/icons

# SAMBA Libs for ntlm_auth to function
append_dir LD_LIBRARY_PATH $WP/usr/lib/$ARCH/samba
[ "$SNAP_ARCH" = "amd64" ] && append_dir LD_LIBRARY_PATH $WP/usr/lib/i386-linux-gnu/samba

# Mesa Libs for OpenGL support
append_dir LD_LIBRARY_PATH $WP/usr/lib/$ARCH/mesa
append_dir LD_LIBRARY_PATH $WP/usr/lib/$ARCH/mesa-egl
[ "$SNAP_ARCH" = "amd64" ] && append_dir LD_LIBRARY_PATH $WP/usr/lib/i386-linux-gnu/mesa
[ "$SNAP_ARCH" = "amd64" ] && append_dir LD_LIBRARY_PATH $WP/usr/lib/i386-linux-gnu/mesa-egl

# Tell libGL where to find the drivers
export LIBGL_DRIVERS_PATH=$WP/usr/lib/$ARCH/dri
[ "$SNAP_ARCH" = "amd64" ] && append_dir LIBGL_DRIVERS_PATH $WP/usr/lib/i386-linux-gnu/dri
append_dir LD_LIBRARY_PATH $LIBGL_DRIVERS_PATH

# Workaround in snapd for proprietary nVidia drivers mounts the drivers in
# /var/lib/snapd/lib/gl that needs to be in LD_LIBRARY_PATH
# Without that OpenGL using apps do not work with the nVidia drivers.
# Ref.: https://bugs.launchpad.net/snappy/+bug/1588192
append_dir LD_LIBRARY_PATH /var/lib/snapd/lib/gl

# Pulseaudio export
append_dir LD_LIBRARY_PATH $WP/usr/lib/$ARCH/pulseaudio
[ "$SNAP_ARCH" = "amd64" ] && append_dir LD_LIBRARY_PATH $WP/usr/lib/i386-linux-gnu/pulseaudio

# Alsa export
export ALSA_CONFIG_PATH="$WP/usr/share/alsa/alsa.conf"

# EGL vendor files on glvnd enabled systems
[ -d /var/lib/snapd/lib/glvnd/egl_vendor.d ] && \
append_dir __EGL_VENDOR_LIBRARY_DIRS /var/lib/snapd/lib/glvnd/egl_vendor.d

# Tell GStreamer where to find its plugins
export GST_PLUGIN_PATH=$WP/usr/lib/$ARCH/gstreamer-1.0
export GST_PLUGIN_SYSTEM_PATH=$WP/usr/lib/$ARCH/gstreamer-1.0
# gst plugin scanner doesn't install in the correct path: https://github.com/ubuntu/snapcraft-desktop-helpers/issues/43
export GST_PLUGIN_SCANNER=$WP/usr/lib/$ARCH/gstreamer1.0/gstreamer-1.0/gst-plugin-scanner

# XDG Config
prepend_dir XDG_CONFIG_DIRS $WP/etc/xdg

# Define snaps' own data dir
prepend_dir XDG_DATA_DIRS $SNAP/share
prepend_dir XDG_DATA_DIRS $WP/usr/share
prepend_dir XDG_DATA_DIRS $SNAP_USER_COMMON
prepend_dir XDG_DATA_DIRS $SNAP_USER_DATA

export HOME=$SNAP_USER_COMMON

# Set XDG_DATA_HOME to local path
export XDG_DATA_HOME=$SNAP_USER_COMMON/.local/share
mkdir -p $XDG_DATA_HOME

# Workaround for GLib < 2.53.2 not searching for schemas in $XDG_DATA_HOME:
#   https://bugzilla.gnome.org/show_bug.cgi?id=741335
prepend_dir XDG_DATA_DIRS $XDG_DATA_HOME

# Set cache folder to local path
export XDG_CACHE_HOME=$SNAP_USER_COMMON/.cache
mkdir -p $XDG_CACHE_HOME

# Set config folder to local path
export XDG_CONFIG_HOME=$SNAP_USER_COMMON/.config
mkdir -p $XDG_CONFIG_HOME

# Create $XDG_RUNTIME_DIR if not exists (to be removed when LP: #1656340 is fixed)
[ -n "$XDG_RUNTIME_DIR" ] && mkdir -p $XDG_RUNTIME_DIR -m 700

# Make PulseAudio socket available inside the snap-specific $XDG_RUNTIME_DIR
if [ -n "$XDG_RUNTIME_DIR" ]; then
    pulsenative="pulse/native"
    pulseaudio_sockpath="$XDG_RUNTIME_DIR/../$pulsenative"
    if [ -S "$pulseaudio_sockpath" ]; then
        export PULSE_SERVER="unix:${pulseaudio_sockpath}"
    fi
fi

# Keep an array of data dirs, for looping through them
IFS=':' read -r -a data_dirs_array <<< "$XDG_DATA_DIRS"

# Font Config and themes
export FONTCONFIG_PATH=$WP/etc/fonts
export FONTCONFIG_FILE=$WP/etc/fonts/fonts.conf

function make_user_fontconfig {
  echo "<fontconfig>"
  if [ -d $REALHOME/.local/share/fonts ]; then
    echo "  <dir>$REALHOME/.local/share/fonts</dir>"
  fi
  if [ -d $REALHOME/.fonts ]; then
    echo "  <dir>$REALHOME/.fonts</dir>"
  fi
  for ((i = 0; i < ${#data_dirs_array[@]}; i++)); do
    if [ -d "${data_dirs_array[$i]}/fonts" ]; then
      echo "  <dir>${data_dirs_array[$i]}/fonts</dir>"
    fi
  done
  echo '  <include ignore_missing="yes">conf.d</include>'
  # We need to include this default cachedir first so that caching
  # works: without it, fontconfig will try to write to the real user home
  # cachedir and be blocked by AppArmor.
  echo '  <cachedir prefix="xdg">fontconfig</cachedir>'
  if [ -d $REALHOME/.cache/fontconfig ]; then
    echo "  <cachedir>$REALHOME/.cache/fontconfig</cachedir>"
  fi
  echo "</fontconfig>"
}

if [ $needs_update = true ]; then
  rm -rf $XDG_DATA_HOME/{fontconfig,fonts,fonts-*,themes,.themes}

  # This fontconfig fragment is installed in a location that is
  # included by the system fontconfig configuration: namely the
  # etc/fonts/conf.d/50-user.conf file.
  mkdir -p $XDG_CONFIG_HOME/fontconfig
  make_user_fontconfig > $XDG_CONFIG_HOME/fontconfig/fonts.conf
fi

# Gdk-pixbuf loaders
export GDK_PIXBUF_MODULE_FILE=$XDG_CACHE_HOME/gdk-pixbuf-loaders.cache
export GDK_PIXBUF_MODULEDIR=$WP/usr/lib/$ARCH/gdk-pixbuf-2.0/2.10.0/loaders
if [ -f $WP/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders ] && [ ! -f "${GDK_PIXBUF_MODULE_FILE}" ]; then
  $WP/usr/lib/$ARCH/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders > $GDK_PIXBUF_MODULE_FILE
fi

if [ ! -d $WINEPREFIX ]; then
# link ttf & ttc fonts from root to wineprefix
mkdir -p $WINEPREFIX/drive_c/windows/Fonts
find /usr/share/fonts/ -type f \( -name "*.ttf" -o -name "*.ttc" \) -exec ln -vs "{}" $WINEPREFIX/drive_c/windows/Fonts/ \; &>/dev/null
fi

# Stop wine from updating $WINEPREFIX automatically
if [ -f "${WINEPREFIX}/.update-timestamp" ]; then
  chkstmp=$(grep disable "${WINEPREFIX}/.update-timestamp" | wc -l)
  if [ $chkstmp -eq 0 ]; then
    echo "disable" > "${WINEPREFIX}/.update-timestamp"
  fi
fi

# Initialise wine
if [ ! -f "${WINEPREFIX}/drive_c/windows/win.ini" ]; then
  # Create the WINE environment
  env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "${WINELOADER}" wineboot --init 2>&1 | \
  yad --progress --title="Preparing Windows environment" --width=400 --center --no-buttons --auto-close --auto-kill --on-top --pulsate
  # Opt out of winetricks metrics - we ninja this to avoid dialogs
  if [ ! -f "${XDG_CACHE_HOME}/winetricks/track_usage" ]; then
    mkdir -p "${XDG_CACHE_HOME}/winetricks"
    echo 0 > "${XDG_CACHE_HOME}/winetricks/track_usage"
  fi
else
  # Notification
  notify-send --icon "${SNAP}/meta/gui/leagueoflegends.png" --expire-time=15000 "${TITLE}" "${NOTICE}"
fi

[ $needs_update = true ] && echo "SNAP_DESKTOP_LAST_REVISION=$SNAP_REVISION" > $SNAP_USER_DATA/.last_revision

# Launch wineboot/winecfg/winetricks if requested.
# If the executable exists then launch it otherwise install it then lauch it.
if [[ ${WINE_EXE} = *"winecfg"* ]] || [[ ${WINE_EXE} = *"wineboot"* ]] || [[ ${WINE_EXE} = *"winetricks"* ]]; then
  env WINEARCH="${WINEARCH}" WINEPREFIX="${WINEPREFIX}" "$@"
elif [ -e "${WINE_EXE}" ]; then
  launch_app
else
  install_app
fi
